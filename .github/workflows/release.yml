name: Release
on:
  workflow_dispatch:
    inputs:
      increment:
        description: 'Version increment type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch
permissions:
  contents: write

jobs:
  calculate-version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Get latest release
        id: latest_release
        run: |
          LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "null" ]; then
            LATEST_TAG="v0.0.0"
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Calculate new version
        id: version
        run: |
          LATEST_TAG="${{ steps.latest_release.outputs.latest_tag }}"
          INCREMENT="${{ github.event.inputs.increment }}"
          # Remove 'v' prefix if present
          VERSION=${LATEST_TAG#v}
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          # Calculate new version based on increment type
          case $INCREMENT in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Calculated new version: $NEW_VERSION (from $LATEST_TAG using $INCREMENT increment)"
      - name: Announce new version
        run: |
          echo "::notice title=New Release Version::Releasing ${{ steps.version.outputs.new_version }} (increment: ${{ github.event.inputs.increment }})"
  tag:
    name: Tag
    runs-on: ubuntu-latest
    needs: [calculate-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Create Tag
        uses: piszmog/create-tag@v1
        with:
          version: ${{ needs.calculate-version.outputs.new_version }}
          message: ${{ needs.calculate-version.outputs.new_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [tag]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: false
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  generate:
    name: Generate Pages
    runs-on: ubuntu-latest
    needs: [calculate-version, release]
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: false
      - run: go mod download
      - run: go tool templ generate -path ./components
      - run: |
          go run main.go -gen -ver ${{ needs.calculate-version.outputs.new_version }}
      - name: Deploy Pages
        uses: peaceiris/actions-gh-pages@v4
        with: 
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: pages
